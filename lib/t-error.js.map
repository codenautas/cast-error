{"version":3,"file":"t-error.js","sourceRoot":"","sources":["../src/t-error.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAEA;IAAmC,iCAAK;IAEpC,uBAAY,OAAc;QAA1B,YACI,kBAAM,OAAO,CAAC,SAGjB;QAFG,KAAI,CAAC,IAAI,GAAG,eAAe,CAAC;QAC5B,KAAI,CAAC,IAAI,GAAG,SAAS,CAAC;;IAC1B,CAAC;IACL,oBAAC;AAAD,CAAC,AAPD,CAAmC,KAAK,GAOvC;AAPY,sCAAa;AAS1B,IAAI,WAAW,GAAG,OAAO,CAAC,KAAK,CAAC;AAEhC,SAAgB,cAAc,CAAC,CAAsB;IACjD,WAAW,GAAG,CAAC,CAAC;AACpB,CAAC;AAFD,wCAEC;AAED,SAAgB,QAAQ,CAAkC,GAAW,EAAE,WAA2B;IAC9F,IAAG,GAAG,YAAY,KAAK,EAAC;QACpB,IAAG,WAAW,IAAI,IAAI,IAAI,CAAC,CAAC,GAAG,YAAY,WAAW,CAAC;YAAE,WAAW,CAAC,aAAU,WAAW,CAAC,IAAI,mBAAe,EAAC,GAAG,CAAC,CAAC;QACpH,OAAO,GAAQ,CAAC;KACnB;IACD,WAAW,CAAC,yBAAyB,EAAC,GAAG,CAAC,CAAC;IAC3C,IAAI,OAAO,GAAU,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CACvD,OAAO,GAAG,IAAI,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC3B,aAAa;IACb,OAAO,GAAG,IAAI,QAAQ,IAAI,SAAS,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CACjE,CACJ,CAAC,QAAQ,EAAE,CAAC;IACb,aAAa;IACb,OAAO,IAAI,CAAC,WAAW,IAAE,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC;AAC7C,CAAC;AAdD,4BAcC;AAED,SAAgB,UAAU,CAAkC,GAAW,EAAE,WAA2B;IAChG,WAAW,CAAC,iBAAiB,EAAC,GAAG,CAAC,CAAC;IACnC,OAAO,QAAQ,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;AACtC,CAAC;AAHD,gCAGC","sourcesContent":["export type Constructor<T> = new(...args: any[]) => T;\r\n\r\nexport class ExtendedError extends Error{\r\n    code:string\r\n    constructor(message:string) {\r\n        super(message)\r\n        this.name = 'ExtendedError';\r\n        this.code = 'UNKNOWN';\r\n    }\r\n}\r\n\r\nvar logFunction = console.error;\r\n\r\nexport function setLogFunction(f:typeof console.error){\r\n    logFunction = f;\r\n}\r\n\r\nexport function expected<T extends Error = ExtendedError>(err:unknown, constructor?:Constructor<T>):T{\r\n    if(err instanceof Error){ \r\n        if(constructor != null && !(err instanceof constructor)) logFunction(`not a \"${constructor.name}\" in a catch:`,err);\r\n        return err as T;\r\n    }\r\n    logFunction('not an Error in a catch',err);\r\n    var message:string = err == null ? \"null error in catch\" : ( \r\n        typeof err == \"string\" ? err : (\r\n            // @ts-ignore\r\n            typeof err == \"object\" && \"message\" in err ? err.message : err\r\n        )\r\n    ).toString();\r\n    // @ts-ignore\r\n    return new (constructor||Error)(message);\r\n}\r\n\r\nexport function unexpected<T extends Error = ExtendedError>(err:unknown, constructor?:Constructor<T>):T{\r\n    logFunction('unexpectedError',err);\r\n    return expected(err, constructor);\r\n}\r\n"]}